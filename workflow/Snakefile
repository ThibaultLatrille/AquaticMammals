import os

configfile: 'config/config.yaml'

FOLDER = os.path.abspath('.')
DATA_FOLDER = f"{FOLDER}/data/selected_genes"
PROC_DATA = f"{FOLDER}/data_processed"

bayescode_path = {}
for executable in ["nodeomega", "readnodeomega"]:
    exec_path = ""
    for b in ["BayesCode", "bayescode", "Bayescode", "bayesCode", "BAYESCODe", "BayesCODE"]:
        exec_path = os.path.join(FOLDER,f'utils/{b}/bin/{executable}')
        if os.path.exists(exec_path):
            break
    if not os.path.exists(exec_path):
        # Find executable in the path using whereis. If not found, raise an error.
        split = os.popen(f'whereis {executable}').read().split()
        if len(split) > 1:
            exec_path = split[1].strip()
        else:
            raise FileNotFoundError(f'{executable} not found. Please install BayesCode and add it to your path.')
    bayescode_path[executable] = exec_path
    print(f"Found {executable} at {exec_path}")

nodeomega_path = bayescode_path["nodeomega"]  # In case you want to specify the path to Bayescode bin folder
readnodeomega_path = bayescode_path["readnodeomega"]  # In case you want to specify the path to Bayescode bin folder

CDS_list = set([i.split("_")[0] for i in os.listdir(DATA_FOLDER) if not i.startswith(".") and i.endswith(".fasta")])
# I modified "51725_NT_AL.tsv" to include the 191 species (file was malformed)
# I modified "55435_NT_AL.rootree" that I copied from OrthoMam v12
# For two CDS, the species don't match between files, I used the intersection: "3620_NT_AL"
print(f"{len(CDS_list)} CDS found in {DATA_FOLDER}.")
CDS_list = list(sorted(CDS_list))
CDS_list = CDS_list[config['CDS_START_LIST']:config['CDS_END_LIST']]

POINTS = config['POINTS']
BURN_IN = config['BURN_IN']

localrules: all,orthomam_preprocess,all_filter,merge_bayescode

rule all:
    input:
        f"{PROC_DATA}/OrthoMam_merged_cov.tsv",
        f"{PROC_DATA}/OrthoMam_merged_omega.tsv"

rule orthomam_preprocess:
    input:
        scripts=f"{FOLDER}/scripts/orthomam_preprocess.py",
        fasta=f"{DATA_FOLDER}/{{CDS}}_NT_AL.fasta",
        tree=f"{DATA_FOLDER}/{{CDS}}_NT_AL.rootree",
        tsv=f"{DATA_FOLDER}/{{CDS}}_NT_AL.tsv"
    output:
        ali=f"{PROC_DATA}/OrthoMam/{{CDS}}/placnr.ali",
        tree=f"{PROC_DATA}/OrthoMam/{{CDS}}/placnr.rootree",
        traits=f"{PROC_DATA}/OrthoMam/{{CDS}}/placnr.traits"
    shell:
        "python3 {input.scripts} --input_fasta {input.fasta} --input_tree {input.tree} --input_tsv {input.tsv} --output_ali {output.ali} --output_tree {output.tree} --output_traits {output.traits}"

rule all_filter:
    input:
        expand(rules.orthomam_preprocess.output.traits,CDS=CDS_list)

rule run_bayescode:
    input:
        ali=rules.orthomam_preprocess.output.ali,
        tree=rules.orthomam_preprocess.output.tree,
        traits=rules.orthomam_preprocess.output.traits
    output:
        f"{PROC_DATA}/OrthoMam/{{CDS}}/nodeomega_{{chain}}.run"
    params:
        chain_name=f"{PROC_DATA}/OrthoMam/{{CDS}}/nodeomega_{{chain}}",
        time="2-23:00",mem=1000,name=lambda wildcards: f"run_CDS{wildcards.CDS}_chain{wildcards.chain}"
    shell: "{nodeomega_path} -a {input.ali} -t {input.tree} --traitsfile {input.traits} -u {POINTS} {params.chain_name}"

rule read_bayescode:
    input:
        run=rules.run_bayescode.output
    output:
        f"{PROC_DATA}/OrthoMam/{{CDS}}/nodeomega_{{chain}}.cov"
    params:
        chain_name=rules.run_bayescode.params.chain_name,
        time="0-10:00",mem=1000,name=lambda wildcards: f"read_CDS{wildcards.CDS}_chain{wildcards.chain}"
    shell:
        "{readnodeomega_path} --every 1 --until {POINTS} --burnin {BURN_IN} --cov {params.chain_name};"
        "{readnodeomega_path} --every 1 --until {POINTS} --burnin {BURN_IN} --newick {params.chain_name};"
        "gzip -f {params.chain_name}.chain && gzip -f {params.chain_name}.trace"

rule merge_bayescode:
    input:
        script=f"{FOLDER}/scripts/merge_bayescode.py",
        cov=expand(rules.read_bayescode.output,CDS=CDS_list,chain=config['CHAINS'])
    output:
        cov=f"{PROC_DATA}/OrthoMam_merged_cov.tsv",
        omega=f"{PROC_DATA}/OrthoMam_merged_omega.tsv"
    shell:
        "python3 {input.script} --input_data {PROC_DATA}/OrthoMam --output_cov {output.cov} --output_omega {output.omega}"
